<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Rostyslav Ugryniuk - Blog</title>
        <link>https://ugross.dev</link>
        <description></description>
        <lastBuildDate>Mon, 30 May 2022 18:43:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>Rostyslav Ugryniuk - Blog</title>
            <url>https://ugross.dev/logo.svg</url>
            <link>https://ugross.dev</link>
        </image>
        <copyright>All rights reserved 2022, Rostyslav Ugryniuk</copyright>
        <category>Technology</category>
        <item>
            <title><![CDATA[Data Structures: Queue]]></title>
            <link>https://ugross.dev/blog/data-structures-queue</link>
            <guid>https://ugross.dev/blog/data-structures-queue</guid>
            <pubDate>Mon, 12 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[A Queue is a linear data structure that keeps its elements in a queue. It uses FIFO (first-in-first-out) ordering in which elements are added to the "end" and are removed from the "front".]]></description>
            <content:encoded><![CDATA[A Queue is a linear data structure that keeps its elements in a queue. It uses FIFO (first-in-first-out) ordering in which elements are added to the "end" and are removed from the "front".]]></content:encoded>
            <author>ug.ross@hotmail.com (Rostyslav Ugryniuk)</author>
        </item>
        <item>
            <title><![CDATA[Data Structures: Stack]]></title>
            <link>https://ugross.dev/blog/data-structures-stack</link>
            <guid>https://ugross.dev/blog/data-structures-stack</guid>
            <pubDate>Sun, 12 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[A Stack is a linear data structure that keeps its elements stacked on each other. It uses LIFO (last-in-first-out) ordering in which the last pushed item to the stack is processed first.]]></description>
            <content:encoded><![CDATA[A Stack is a linear data structure that keeps its elements stacked on each other. It uses LIFO (last-in-first-out) ordering in which the last pushed item to the stack is processed first.]]></content:encoded>
            <author>ug.ross@hotmail.com (Rostyslav Ugryniuk)</author>
        </item>
        <item>
            <title><![CDATA[Data Structures: Linked List]]></title>
            <link>https://ugross.dev/blog/data-structures-linked-list</link>
            <guid>https://ugross.dev/blog/data-structures-linked-list</guid>
            <pubDate>Sat, 07 Mar 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Linked list is a linear data structure, this means that there is a sequence and an order to how they are constructed and traversed.
The linked list data structure is a good choice over arrays when you don't need to have random/indexed access to your data...]]></description>
            <content:encoded><![CDATA[Linked list is a linear data structure, this means that there is a sequence and an order to how they are constructed and traversed.
The linked list data structure is a good choice over arrays when you don't need to have random/indexed access to your data...]]></content:encoded>
            <author>ug.ross@hotmail.com (Rostyslav Ugryniuk)</author>
        </item>
        <item>
            <title><![CDATA[React Component Lifecycle Methods]]></title>
            <link>https://ugross.dev/blog/react-component-lifecycle-methods</link>
            <guid>https://ugross.dev/blog/react-component-lifecycle-methods</guid>
            <pubDate>Mon, 17 Jun 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[In this article, we are going to explore React lifecycle methods. As for me, if you want to work with React this knowledge is crucial because you need to be able to implement component logic in the right place.]]></description>
            <content:encoded><![CDATA[In this article, we are going to explore React lifecycle methods. As for me, if you want to work with React this knowledge is crucial because you need to be able to implement component logic in the right place.]]></content:encoded>
            <author>ug.ross@hotmail.com (Rostyslav Ugryniuk)</author>
        </item>
        <item>
            <title><![CDATA[Dates in JavaScript]]></title>
            <link>https://ugross.dev/blog/dates-in-javascript</link>
            <guid>https://ugross.dev/blog/dates-in-javascript</guid>
            <pubDate>Tue, 12 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Working with dates in JS can be a complicated task. Personally, it always has been my weak part, so I decided to write a post about dates…]]></description>
            <content:encoded><![CDATA[Working with dates in JS can be a complicated task. Personally, it always has been my weak part, so I decided to write a post about dates…]]></content:encoded>
            <author>ug.ross@hotmail.com (Rostyslav Ugryniuk)</author>
        </item>
        <item>
            <title><![CDATA[JS Console API tips]]></title>
            <link>https://ugross.dev/blog/js-console-api-tips</link>
            <guid>https://ugross.dev/blog/js-console-api-tips</guid>
            <pubDate>Wed, 20 Feb 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[console.log is one of the most basic and common debugging tools in JavaScript. However, the console object gives us more methods to make debugging easier.]]></description>
            <content:encoded><![CDATA[console.log is one of the most basic and common debugging tools in JavaScript. However, the console object gives us more methods to make debugging easier.]]></content:encoded>
            <author>ug.ross@hotmail.com (Rostyslav Ugryniuk)</author>
        </item>
    </channel>
</rss>